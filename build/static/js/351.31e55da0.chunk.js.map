{"version":3,"file":"static/js/351.31e55da0.chunk.js","mappings":"+KAEaA,EAAW,CACtBC,OAAQ,CACNC,EAAG,MACHC,QAAS,EACTC,WAAY,CACVC,SAAU,KAGdC,QAAS,CACPJ,EAAG,IACHC,QAAS,IAIAI,EAAS,SAACC,EAASC,GACzBC,EAAAA,GAAAA,SAAeF,EAAQG,WAC1BH,EAAQG,SAAUD,EAAAA,EAAAA,IAAMD,GAE3B,C,iOClBYG,EAAiBC,EAAAA,GAAAA,IAAH,oG,sBCoE3B,EAhEgB,WACd,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,EAAUC,EAAAA,SAChB,EAAsCA,EAAAA,UAAe,GAArD,eAAOC,EAAP,KAAoBC,EAApB,KACA,EAAkDF,EAAAA,UAAe,GAAjE,eAAOG,EAAP,KAA0BC,EAA1B,KAwBA,OACE,UAACT,EAAD,YACE,SAAC,IAAD,CAAQU,KAAK,UAAUC,QAlBT,WAChBJ,GAAe,EAChB,EAgBG,sBAGA,SAAC,IAAD,CACEK,MAAM,gBACNC,KAAMP,EACNQ,KA/BW,WACfP,GAAe,EAChB,EA8BKQ,SA5Be,WACnBR,GAAe,EAChB,EA2BKS,OAAQ,KALV,UAOE,UAAC,IAAD,CAAMC,SAzBS,SAACC,GACpBT,GAAqB,GACrBP,GAASiB,EAAAA,EAAAA,IAASD,EAAME,UACrBC,SACAC,MAAK,SAACC,GACc,MAAfA,EAAIC,QACNf,GAAqB,GACrBL,EAAQL,QAAQ0B,eAEhBhB,GAAqB,EAExB,GACJ,EAamCiB,IAAKtB,EAAnC,WACE,SAAC,IAAD,CAAOuB,I,o1IACP,gBAAIC,MAAO,CAAEC,UAAW,SAAUC,WAAY,OAAQC,SAAU,QAAhE,wCAC8B,UAE9B,SAAC,SAAD,CAAWC,KAAK,UAAUC,MAAO,CAAC,CAAEC,UAAU,EAAMrC,QAAS,yBAA7D,UACE,SAAC,IAAD,CAAOsC,YAAY,cAAczB,KAAK,cAExC,SAAC,SAAD,WACE,SAAC,IAAD,CACE0B,QAAS5B,EACT6B,SAAS,SACT3B,KAAK,UACLkB,MAAO,CAAEU,MAAO,QAJlB,6BAaX,ECnEYC,EAAatC,EAAAA,GAAAA,IAAH,wCAIVuC,EAAavC,EAAAA,GAAAA,IAAH,0CAIVwC,EAAaxC,EAAAA,GAAAA,IAAH,4hBA2BVyC,EAAezC,EAAAA,GAAAA,IAAH,sTAkBZ0C,EAAW1C,EAAAA,GAAAA,IAAH,2JASR2C,EAAa3C,EAAAA,GAAAA,IAAH,8cA0BV4C,EAAW5C,EAAAA,GAAAA,IAAH,s4B,8rEC+CrB,EArHiB,SAAC,GAAa,IAAD,wBAAVsB,EAAU,EAAVA,IAClB,GAAsCuB,EAAAA,EAAAA,WAAS,GAA/C,eAAOxC,EAAP,KAAoBC,EAApB,KACA,GAA4CuC,EAAAA,EAAAA,WAAS,GAArD,eAAOC,EAAP,KAAuBC,EAAvB,KACA,GAAwBF,EAAAA,EAAAA,UAAS,CAAC,GAAlC,eAAOG,EAAP,KAAaC,EAAb,KACIC,EAAW,IAAIC,SACXC,GAAMC,EAAAA,EAAAA,KAAND,EACFnD,GAAWC,EAAAA,EAAAA,MAyCjB,OACE,UAACoC,EAAD,WACM,OAAHhB,QAAG,IAAHA,GAAAA,EAAKgC,MACJ,UAACf,EAAD,YACE,SAACC,EAAD,UACI,OAAClB,QAAD,IAACA,GAAD,UAACA,EAAKgC,KAAKC,WAAX,OAAC,EAAeC,QAChB,gBACE9B,IAAG,UAAK+B,EAAAA,EAAL,mBAAgBnC,QAAhB,IAAgBA,GAAhB,UAAgBA,EAAKgC,KAAKC,WAA1B,aAAgB,EAAeC,QAClCE,IAAI,iBAGN,SAAC,IAAD,CACE/B,MAAO,CACLgC,cAAe,UAFnB,UAKGC,EAAAA,EAAAA,IAAoB,OACnBtC,QADmB,IACnBA,GADmB,UACnBA,EAAKgC,YADc,iBACnB,EAAWC,WADQ,aACnB,EAAgBM,WADG,OAEnBvC,QAFmB,IAEnBA,GAFmB,UAEnBA,EAAKgC,YAFc,iBAEnB,EAAWC,WAFQ,aAEnB,EAAgBO,gBAMxB,UAACrB,EAAD,YACE,iBAAKsB,UAAU,QAAf,iBACGzC,QADH,IACGA,GADH,UACGA,EAAKgC,YADR,iBACG,EAAWC,WADd,aACG,EAAgBM,WADnB,WACgCvC,QADhC,IACgCA,GADhC,UACgCA,EAAKgC,YADrC,iBACgC,EAAWC,WAD3C,aACgC,EAAgBO,cAEhD,iBAAKC,UAAU,KAAf,sBAAuBzC,QAAvB,IAAuBA,GAAvB,UAAuBA,EAAKgC,YAA5B,iBAAuB,EAAWC,WAAlC,aAAuB,EAAgBS,OACvC,SAACtB,EAAD,WACE,SAAC,IAAD,CACEjC,KAAK,UACLsD,UAAU,kBACVrD,QAAS,WAxErBJ,GAAe,EAwEM,EAHX,SAKG8C,EAAE,oCAOX,SAACa,EAAA,EAAD,KAGF,SAAC,IAAD,CACEtD,MAAM,sBACNuD,UAAQ,EACRtD,KAAMP,EACNQ,KArEkB,WAClBiC,GAG6B,IAA7BqB,OAAOC,KAAKpB,GAAMqB,SAGtBnB,EAASoB,OAAO,SAAUtB,GAC1B/C,GAASsE,EAAAA,EAAAA,IAAcrB,IACvB5C,GAAe,GAChB,EA4DKQ,SA5Ee,WACfgC,GAGJxC,GAAe,EAChB,EAkEG,UAOE,SAAC,IAAD,CACEkE,OAAO,mDACPC,SAAS,UAETC,SAAU,EACVC,aA7Fa,SAAC3B,GACpB,IAAM4B,EAA2B,eAAd5B,EAAKvC,MAAuC,cAAduC,EAAKvC,KAEtD,OAAKmE,GAILC,QAAQC,IAAIF,EAAY5B,GACjB4B,IAJLhF,EAAAA,GAAAA,MAAc,sCACP,EAIV,EAqFOmF,OAAO,wBACPC,SApEa,SAACC,GACM,eAAlB,OAAJA,QAAI,IAAJA,OAAA,EAAAA,EAAMjC,KAAKzB,QACbwB,GAAkB,IAElBA,GAAkB,GAClBE,EAAQgC,EAAKjC,KAAKkC,eAErB,EAsDK,UASE,SAAC,IAAD,CAAQnB,UAAU,oBAAoBoB,MAAM,SAACC,EAAA,EAAD,IAA5C,0BAOT,E,2ECzHD,EAbe,CACb,eACA,UACA,gBACA,eACA,UACA,UACA,kBACA,uBACA,eACA,mBACA,uB,WCVWC,GAAqBC,EAAAA,GACxB,CACNzB,WAAYyB,EAAAA,KAETrD,SAAS,0BACTsD,IAAI,EAAG,iCACPC,IAAI,GAAI,kCACX1B,UAAWwB,EAAAA,KAERrD,SAAS,yBACTsD,IAAI,EAAG,iCACPC,IAAI,GAAI,kCACXC,MAAOH,EAAAA,KAAarD,SAAS,qBAAqBwD,MAAM,yBACxDC,aAAcJ,EAAAA,KAEXrD,SAAS,4BACTsD,IAAI,EAAG,+CACPC,IAAI,GAAI,iDACRG,QAAQ,iDAAkD,wBAE7DC,cAAeN,EAAAA,KAAarD,SAAS,6BAErC4D,aAAcP,EAAAA,KAEXrD,SAAS,4BACTuD,IAAI,IAAK,iDACZM,qBAAsBR,EAAAA,KAEnBrD,SAAS,oCACTuD,IAAI,IAAK,iDACZO,QAAST,EAAAA,KAAarD,SAAS,uBAY/B+D,QAASV,EAAAA,KAENrD,SAAS,uBACT0D,QACC,kHACA,sBASJM,SAAUX,EAAAA,KACVY,sBAAuBZ,EAAAA,KAEpBa,MAAM,CAACb,EAAAA,GAAQ,YAAa,MAAO,qCAEvCrD,WCyNH,GAtQuB,SAAC,GAAa,IAAXX,EAAU,EAAVA,IAClBrB,GAAWC,EAAAA,EAAAA,MACTkD,GAAMC,EAAAA,EAAAA,KAAND,EACR,GAAoCP,EAAAA,EAAAA,UAAS,IAA7C,eAAOuD,EAAP,KAAmBC,EAAnB,KACA,SAAyD/E,QAAzD,IAAyDA,OAAzD,EAAyDA,EAAKgC,KAAKC,IAA3DM,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,UAAW4B,EAA/B,EAA+BA,aAAcY,EAA7C,EAA6CA,QAC7C,EAUO,OAAHhF,QAAG,IAAHA,GAAAA,EAAKgC,KAAKiD,cAAV,OAA0BjF,QAA1B,IAA0BA,OAA1B,EAA0BA,EAAKgC,KAAKiD,cAAgB,GATtDX,EADF,EACEA,cACAY,EAFF,EAEEA,oBACAX,EAHF,EAGEA,aACAC,EAJF,EAIEA,qBACAW,EALF,EAKEA,aACAC,EANF,EAMEA,gBACAV,EAPF,EAOEA,QACAD,EARF,EAQEA,QACAY,EATF,EASEA,iBAEF,GAOIC,EAAAA,EAAAA,IAAQ,CACVC,cAAe,CACbhD,WAAAA,EACAC,UAAAA,EACA4B,aAAAA,EACAY,QAAAA,EACAQ,iBAAkB,GAClBb,SAAU,GACVC,sBAAuB,GACvBN,cAAAA,EACAC,aAAAA,EACAG,QAAAA,EACAD,QAAAA,EACAW,gBAAAA,EACAZ,qBAAAA,EACAW,aAAAA,EACAE,iBAAAA,EACAH,oBAAAA,GAEFO,UAAUC,EAAAA,EAAAA,GAAY3B,MAzBtB4B,EADF,EACEA,aACAC,EAFF,EAEEA,QACAC,EAHF,EAGEA,UACAC,EAJF,EAIEA,SACAC,EALF,EAKEA,SACaC,EANf,EAMEC,UAAaD,OAuBTE,EAAa,SAAC/G,GAClB,IAAMgH,GAAe,OAAO,IAAIC,IAAItB,IAC9BuB,EAAQF,EAAgBG,WAAU,SAACC,GAAD,OAAQA,IAAOpH,CAAf,IACxC,IAAe,IAAXkH,EACFtB,GAAc,SAACD,GAAD,wBAAoBA,GAApB,CAAgC3F,GAAhC,QACT,CACL,IAAMqH,GAAe,OAAOL,GAC5BK,EAAgBC,OAAOJ,EAAO,GAC9BtB,EAAcyB,EACf,CACF,EA8BD,OAPAE,EAAAA,EAAAA,YAAU,WACR,IAAM5D,EAAOD,OAAOC,KAAKkD,GACnBQ,EAAe,kBAAO1B,GAAehC,GACrCqD,GAAe,OAAO,IAAIC,IAAII,IAEpCzB,EAAcoB,EACf,GAAE,CAACH,KAEF,UAAC3E,EAAD,YACE,gBAAKoB,UAAU,QAAf,SAAwBX,EAAE,wBAEtB,OAAH9B,QAAG,IAAHA,GAAAA,EAAKgC,MACJ,SAACV,EAAD,WACE,UAAC,IAAD,CAAM5B,SAAUiG,GAlCP,SAAC3D,GAChB,GAAIA,EAAKwD,kBAAoBxD,EAAK2C,SAAS5B,OAAS,EAMlD,OALA+C,EAAS,WAAY,CACnB3G,KAAM,kBACNb,QAAS,oDAEXyH,EAAS,WAAY,CAAEY,cAAc,IAGvC,GAAqC,IAAjC3E,EAAKwD,iBAAiBzC,QAAgBf,EAAK2C,SAAS5B,OAAS,EAM/D,OALA+C,EAAS,mBAAoB,CAC3B3G,KAAM,WACNb,QAAS,yEAEXyH,EAAS,mBAAoB,CAAEY,cAAc,KAG/CC,EAAAA,EAAAA,MACA,IAAMhF,GAAWiF,EAAAA,EAAAA,GAAkB7E,GACnCrD,GAASmI,EAAAA,EAAAA,IAAgBlF,GAC1B,IAc+Ca,UAAU,iBAAlD,WACE,gBAAKA,UAAU,gBAAf,SAAgCX,EAAE,wBAClC,gBAAKW,UAAU,gBAAf,SACGqC,EAAWiC,SAAS,eAAiBjC,EAAWiC,SAAS,cACxD,iBAAKtE,UAAU,gBAAf,WACE,SAAC,KAAD,CACEhC,KAAK,aACLmF,QAASA,EACTlF,MAAO,CAAEC,UAAU,GACnBqG,OAAQ,kBAAGC,EAAH,EAAGA,MAAH,OACN,iBAAKxE,UAAU,gBAAf,WACE,SAAC,SAAD,WACE,SAAC,KAAD,kBAAWwE,GAAX,IAAkBC,OAAQD,EAAMC,aAElC,eAAGzE,UAAU,kBAAb,wBAAiCuD,EAAOzD,kBAAxC,aAAiC,EAAmBjE,aALhD,KASV,SAAC,KAAD,CACEmC,KAAK,YACLmF,QAASA,EACTlF,MAAO,CAAEC,UAAU,GACnBqG,OAAQ,kBAAGC,EAAH,EAAGA,MAAH,OACN,iBAAKxE,UAAU,gBAAf,WACE,SAAC,SAAD,WACE,SAAC,KAAD,kBAAWwE,GAAX,IAAkBC,OAAQD,EAAMC,aAElC,eAAGzE,UAAU,kBAAb,wBAAiCuD,EAAOxD,iBAAxC,aAAiC,EAAkBlE,aAL/C,OAnBb,UA8BIuH,EAAU,cA9Bd,YA8B+BA,EAAU,iBAG5C,gBAAKpD,UAAU,YAAf,UACE,UAAC,IAAD,CAAQtD,KAAK,UAAUC,QAAS,kBAAM8G,EAAW,aAAjB,EAAhC,UACGpE,EAAE,gBADL,KACsB,gBAAK1B,IAAK+G,EAAK/E,IAAI,eAK3C,gBAAKK,UAAU,gBAAf,SAAgCX,EAAE,uBAClC,gBAAKW,UAAU,gBAAf,SACGqC,EAAWiC,SAAS,aACnB,iBAAKtE,UAAU,wBAAf,WACE,SAAC,KAAD,CACEhC,KAAK,mBACLmF,QAASA,EACTlF,MAAO,CAAEC,UAAU,GACnBqG,OAAQ,kBAAGC,EAAH,EAAGA,MAAH,OACN,4BACE,SAAC,SAAD,WACE,SAAC,KAAD,gBACErG,YAAY,oBACRqG,GAFN,IAGEC,OAAQD,EAAMC,OACd/H,KAAK,iBAGT,eAAGsD,UAAU,kBAAb,wBAAiCuD,EAAOR,wBAAxC,aAAiC,EAAyBlH,aAVtD,KAcV,SAAC,KAAD,CACEmC,KAAK,WACLmF,QAASA,EACTlF,MAAO,CAAEC,UAAU,GACnBqG,OAAQ,kBAAGC,EAAH,EAAGA,MAAH,OACN,4BACE,SAAC,SAAD,WACE,SAAC,KAAD,gBACErG,YAAY,gBACRqG,GAFN,IAGEC,OAAQD,EAAMC,OACd/H,KAAK,iBAGT,eAAGsD,UAAU,kBAAb,wBAAiCuD,EAAOrB,gBAAxC,aAAiC,EAAiBrG,aAV9C,KAcV,SAAC,KAAD,CACEmC,KAAK,wBACLmF,QAASA,EACTlF,MAAO,CAAEC,UAAU,GACnBqG,OAAQ,kBAAGC,EAAH,EAAGA,MAAH,OACN,2BACG,KACD,SAAC,SAAD,WACE,SAAC,KAAD,gBACErG,YAAY,wBACRqG,GAFN,IAGEC,OAAQD,EAAMC,OACd/H,KAAK,iBAGT,eAAGsD,UAAU,kBAAb,wBAAiCuD,EAAOpB,6BAAxC,aAAiC,EAA8BtG,aAX3D,OAiBZ,iBAGJ,gBAAKmE,UAAU,YAAf,UACE,UAAC,IAAD,CAAQtD,KAAK,UAAUC,QAAS,kBAAM8G,EAAW,WAAjB,EAAhC,UACGpE,EAAE,gBADL,KACsB,gBAAK1B,IAAK+G,EAAK/E,IAAI,cAK1CgF,EAAAA,KAAW,SAACC,EAAWhB,GACtB,OACE,UAAC,EAAAiB,SAAD,YACE,gBAAK7E,UAAU,gBAAf,SAAgCX,EAAE,WAAD,OAAYuF,OAC7C,gBAAK5E,UAAU,gBAAf,SACGqC,EAAWiC,SAASM,IACnB,SAAC,KAAD,CACE5G,KAAM4G,EACNzB,QAASA,EACTlF,MAAO,CAAEC,UAAU,GACnBqG,OAAQ,kBAAGC,EAAH,EAAGA,MAAH,OACN,4BACE,SAAC,SAAD,UACiB,qBAAdI,GAAkD,iBAAdA,GACnC,SAAC,KAAD,gBAAOlI,KAAK,UAAa8H,GAAzB,IAAgCC,OAAQD,EAAMC,WAE9C,SAAC,KAAD,kBAAWD,GAAX,IAAkBC,OAAQD,EAAMC,aAGpC,cAAGzE,UAAU,kBAAb,mBAAgCuD,EAAOqB,UAAvC,aAAgC,EAAmB/I,YAT/C,IALX,UAoB4B,SAAzBuH,EAAUwB,IAA0BxB,EAAUwB,GAE1CxB,EAAUwB,GADV,0BAKV,gBAAK5E,UAAU,YAAf,UACE,UAAC,IAAD,CAAQtD,KAAK,UAAUC,QAAS,kBAAM8G,EAAWmB,EAAjB,EAAhC,UACGvF,EAAE,gBADL,KACsB,gBAAK1B,IAAK+G,EAAK/E,IAAI,gBA/B9BiE,EAoClB,KAED,SAAC,IAAD,CACEhG,MAAO,CAAEU,MAAO,MAAOT,UAAW,UAClCnB,KAAK,UACL2B,SAAS,SACT2B,UAAU,SAJZ,0BAWJ,SAACE,EAAA,EAAD,MAIP,ECnRY4E,GAAe7I,EAAAA,GAAAA,IAAH,45C,8DCkDzB,GA5CiB,SAAC,GAAa,IAAD,EAAVsB,EAAU,EAAVA,IACV8B,GAAMC,EAAAA,EAAAA,KAAND,EAER,OACE,UAACyF,GAAD,YACE,gBAAK9E,UAAU,eAAf,SAA+BX,EAAE,wBACjC,gBAAKW,UAAU,mBAAf,SAAmCX,EAAE,kCACrC,gBAAKW,UAAU,iBAAf,mBAUGzC,EAAIgC,KAAKwF,gBAVZ,aAUG,EAAmBC,KAAI,SAACC,EAAMrB,GAC7B,OACE,UAAC,IAAD,CAAQhG,MAAO,CAAEU,MAAO,QAAsB5B,KAAK,UAAnD,WACE,gBAAKsD,UAAU,OAAf,UACE,gBAAKrC,IAAKuH,GAAUvF,IAAI,eAE1B,iBAAKK,UAAU,SAAf,WACE,yBAAIiF,EAAKE,gBAAgBC,MAAM,EAAG,GAAlC,UACA,eAAGxH,MAAO,CAAEyH,OAAQ,UAApB,wBACcJ,EAAKK,UAAL,WAAqBL,EAAKK,WAAc,SAEtD,eAAG1H,MAAO,CAAEyH,OAAQ,UAApB,0BACgBJ,EAAKM,YAAL,WAAuBN,EAAKM,aAAgB,SAE5D,2CAAmBN,EAAKO,YAAL,WAAuBP,EAAKO,aAAgB,aAZ5B5B,EAgB1C,QAOR,E,YChDY6B,GAAOxJ,EAAAA,GAAAA,IAAH,8FCmDjB,GAxCgB,WACd,OAAqDyJ,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAWA,EAAMC,OAAjB,IAAzDC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,UAAWC,EAAhC,EAAgCA,iBAG1BC,IAFW7J,EAAAA,EAAAA,OAEF8J,EAAAA,EAAAA,OAWf,OATAhC,EAAAA,EAAAA,YAAU,WACR,GAAoB,KAAhB+B,EAAOE,KAAa,CACtB,IAAMC,EAAUC,SAASC,cAAcL,EAAOE,MAC1CC,GACFA,EAAQG,eAAe,CAAEC,SAAU,UAEtC,CACF,GAAE,CAACP,EAAQF,IACZhF,QAAQC,IAAIiF,IAEV,+BACE,SAACQ,EAAA,OAAD,CAAapL,SAAUA,GAAAA,EAAUqL,QAAQ,SAASC,QAAQ,UAAUC,KAAK,SAAzE,UACE,SAAClB,GAAD,UACGK,GAAkC,YAArBC,GACZ,SAAC7F,EAAA,EAAD,KAEA,iCACE,SAAC0G,EAAD,CAAgBrJ,IAAG,OAAEsI,QAAF,IAAEA,OAAF,EAAEA,EAAatI,OAClC,SAAC,EAAD,KAEA,SAAC,GAAD,CAAgBA,IAAG,OAAEsI,QAAF,IAAEA,OAAF,EAAEA,EAAatI,OAClC,SAAC,GAAD,CAAUA,IAAG,OAAEsI,QAAF,IAAEA,OAAF,EAAEA,EAAatI,cAWzC,C","sources":["helpers/motion.js","components/Account/Deposit/styled.js","components/Account/Deposit/Deposit.jsx","components/Account/InfoUser/styled.js","components/Account/InfoUser/InfoAvatarUser.jsx","components/Account/InfoUser/fields.js","components/Account/InfoUser/schema.js","components/Account/InfoUser/InfoDetailUser.jsx","components/Account/MyWallet/styled.js","components/Account/MyWallet/MyWallet.jsx","pages/Account/styled.js","pages/Account/Account.jsx"],"sourcesContent":["import { toast } from \"react-toastify\";\r\n\r\nexport const variants = {\r\n  hidden: {\r\n    x: \"20%\",\r\n    opacity: 0,\r\n    transition: {\r\n      duration: 0.2,\r\n    },\r\n  },\r\n  visible: {\r\n    x: \"0\",\r\n    opacity: 1,\r\n  },\r\n};\r\n\r\nexport const notify = (toastId, message) => {\r\n  if (!toast.isActive(toastId.current)) {\r\n    toastId.current = toast(message);\r\n  }\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const DepositWrapper = styled.div`\r\n  margin-top: 5rem;\r\n  button {\r\n    height: 5rem;\r\n    width: 50rem;\r\n  }\r\n`;\r\n","import { Button, Form, Image, Input, Modal } from 'antd';\r\nimport React from 'react';\r\nimport { DepositWrapper } from './styled';\r\nimport paypalImage from '../../../assets/Account/paypal_logo.png';\r\nimport { addMoney } from '../../../redux/slice/account.slice';\r\nimport { useDispatch } from 'react-redux';\r\nconst Deposit = () => {\r\n  const dispatch = useDispatch();\r\n  const formRef = React.useRef();\r\n  const [isModalOpen, setIsModalOpen] = React.useState(false);\r\n  const [isLoadingAddMoney, setIsLoadingAddMoney] = React.useState(false);\r\n  const handleOk = () => {\r\n    setIsModalOpen(false);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setIsModalOpen(false);\r\n  };\r\n  const showModal = () => {\r\n    setIsModalOpen(true);\r\n  };\r\n  const handleSubmit = (value) => {\r\n    setIsLoadingAddMoney(true);\r\n    dispatch(addMoney(value.deposit))\r\n      .unwrap()\r\n      .then((res) => {\r\n        if (res.status === 200) {\r\n          setIsLoadingAddMoney(false);\r\n          formRef.current.resetFields();\r\n        } else {\r\n          setIsLoadingAddMoney(false);\r\n        }\r\n      });\r\n  };\r\n  return (\r\n    <DepositWrapper>\r\n      <Button type=\"primary\" onClick={showModal}>\r\n        Deposit\r\n      </Button>\r\n      <Modal\r\n        title=\"Deposit Money\"\r\n        open={isModalOpen}\r\n        onOk={handleOk}\r\n        onCancel={handleCancel}\r\n        footer={null}\r\n      >\r\n        <Form onFinish={handleSubmit} ref={formRef}>\r\n          <Image src={paypalImage} />\r\n          <h3 style={{ textAlign: 'center', fontWeight: 'bold', fontSize: '2rem' }}>\r\n            Amount you need to deposit {'($)'}\r\n          </h3>\r\n          <Form.Item name=\"deposit\" rules={[{ required: true, message: 'Please input deposit' }]}>\r\n            <Input placeholder=\"Enter money\" type=\"number\" />\r\n          </Form.Item>\r\n          <Form.Item>\r\n            <Button\r\n              loading={isLoadingAddMoney}\r\n              htmlType=\"submit\"\r\n              type=\"primary\"\r\n              style={{ width: '100%' }}\r\n            >\r\n              Submit\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </Modal>\r\n    </DepositWrapper>\r\n  );\r\n};\r\n\r\nexport default Deposit;\r\n","import styled from \"styled-components\";\r\nexport const MainAvatar = styled.div`\r\n  width: 100%;\r\n`;\r\n\r\nexport const HeaderInfo = styled.div`\r\n  display: flex;\r\n`;\r\n\r\nexport const AvatarUser = styled.div`\r\n  width: 150px;\r\n  margin-right: 18px;\r\n  height: 150px;\r\n  border-radius: 50%;\r\n  border: 5px solid;\r\n  border-image-slice: 1;\r\n  border-image-source: linear-gradient(to right bottom, #2f2e86, #ffffff);\r\n  &&& {\r\n    .ant-avatar {\r\n      width: 100%;\r\n      aspect-ratio: 1/1;\r\n      margin: 0;\r\n      height: 100%;\r\n      display: flex;\r\n      justify-content: center;\r\n      align-items: center;\r\n      font-size: 6rem;\r\n      color: rebeccapurple;\r\n    }\r\n  }\r\n  img {\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n`;\r\n\r\nexport const TextInfoUser = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-end;\r\n  .title {\r\n    font-style: normal;\r\n    font-weight: 700;\r\n    font-size: 24px;\r\n    color: white;\r\n  }\r\n  .id {\r\n    font-style: italic;\r\n    font-weight: 400;\r\n    font-size: 16px;\r\n    color: #e0e0e0;\r\n  }\r\n`;\r\n\r\nexport const Onchange = styled.div`\r\n  align-items: center;\r\n  margin-top: 21px;\r\n  display: flex;\r\n  color: white;\r\n  .button_onchange {\r\n    padding: 3px 15px;\r\n  }\r\n`;\r\nexport const InfoDetail = styled.div`\r\n  &&& {\r\n    .ant-form-item {\r\n      margin: 0;\r\n    }\r\n  }\r\n  margin-top: 74px;\r\n  .title {\r\n    font-style: normal;\r\n    font-weight: 700;\r\n    font-size: 32px;\r\n    letter-spacing: 0.0025em;\r\n    color: #ffffff;\r\n  }\r\n  .button_logOut {\r\n    background-color: #141414;\r\n    color: white;\r\n    font-style: normal;\r\n    font-weight: 400;\r\n    font-size: 16px;\r\n    line-height: 23px;\r\n    padding: 5px 14px;\r\n    margin-top: 15px;\r\n  }\r\n`;\r\n\r\nexport const ShowInfo = styled.div`\r\n  margin-top: 40px;\r\n  .grid_container {\r\n    display: grid;\r\n    /* grid-template-columns: auto auto auto; */\r\n    grid-template: repeat(3, 1fr) / repeat(3, 1fr);\r\n    gap: 47px;\r\n  }\r\n  .grid_item {\r\n  }\r\n  .one {\r\n    font-style: normal;\r\n    font-weight: 700;\r\n    font-size: 24px;\r\n    letter-spacing: 0.0025em;\r\n    color: #ffffff;\r\n  }\r\n  .two {\r\n    font-style: normal;\r\n    font-weight: 400;\r\n    font-size: 20px;\r\n    letter-spacing: 0.0025em;\r\n    color: #ffffff;\r\n  }\r\n  Button {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    img {\r\n      height: 100%;\r\n    }\r\n  }\r\n  .userNameField {\r\n    display: flex;\r\n    gap: 1rem;\r\n    width: 100%;\r\n    .userNameInput {\r\n      width: 50%;\r\n    }\r\n  }\r\n  .change_password_field {\r\n    display: flex;\r\n    gap: 1rem;\r\n  }\r\n  .validateMessage {\r\n    font-size: 2rem;\r\n    color: orange;\r\n  }\r\n`;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  HeaderInfo,\r\n  MainAvatar,\r\n  AvatarUser,\r\n  TextInfoUser,\r\n  Onchange,\r\n} from \"./styled\";\r\nimport { Button, Modal, Input, Avatar, Upload, message } from \"antd\";\r\nimport Pen from \"../../../assets/Account/buttonchange.png\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { getEditAvatar, getAccount } from \"../../../redux/slice/account.slice\";\r\nimport Loading from \"../../../layout/components/Loading/Loading\";\r\nimport { URL_API } from \"../../../constants/constants.js\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { UploadOutlined } from \"@ant-design/icons\";\r\nimport { getDefaultAvatarName } from \"../../../helpers\";\r\nimport { assignToFormData } from \"../../../helpers/formData\";\r\n\r\nconst InfoUser = ({ res }) => {\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [disabledButton, setDisabledButton] = useState(false);\r\n  const [file, setFile] = useState({});\r\n  let formData = new FormData();\r\n  const { t } = useTranslation();\r\n  const dispatch = useDispatch();\r\n  const showModal = () => {\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  const beforeUpload = (file) => {\r\n    const isJpgOrPng = file.type === \"image/jpeg\" || file.type === \"image/png\";\r\n\r\n    if (!isJpgOrPng) {\r\n      message.error(\"You can only upload JPG/PNG file!\");\r\n      return false;\r\n    }\r\n    console.log(isJpgOrPng, file);\r\n    return isJpgOrPng;\r\n  };\r\n  const handleCancel = () => {\r\n    if (disabledButton) {\r\n      return;\r\n    }\r\n    setIsModalOpen(false);\r\n  };\r\n  const handleChangeAvt = () => {\r\n    if (disabledButton) {\r\n      return;\r\n    }\r\n    if (Object.keys(file).length === 0) {\r\n      return;\r\n    }\r\n    formData.append(\"avatar\", file);\r\n    dispatch(getEditAvatar(formData));\r\n    setIsModalOpen(false);\r\n  };\r\n  const handleChange = (info) => {\r\n    if (info?.file.status === \"uploading\") {\r\n      setDisabledButton(true);\r\n    } else {\r\n      setDisabledButton(false);\r\n      setFile(info.file.originFileObj);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <MainAvatar>\r\n      {res?.data ? (\r\n        <HeaderInfo>\r\n          <AvatarUser>\r\n            {!!res?.data.dev?.avatar ? (\r\n              <img\r\n                src={`${URL_API}/${res?.data.dev?.avatar}`}\r\n                alt=\"avatar user\"\r\n              />\r\n            ) : (\r\n              <Avatar\r\n                style={{\r\n                  verticalAlign: \"middle\",\r\n                }}\r\n              >\r\n                {getDefaultAvatarName(\r\n                  res?.data?.dev?.first_name,\r\n                  res?.data?.dev?.last_name\r\n                )}\r\n              </Avatar>\r\n            )}\r\n          </AvatarUser>\r\n\r\n          <TextInfoUser>\r\n            <div className=\"title\">\r\n              {res?.data?.dev?.first_name} {res?.data?.dev?.last_name}\r\n            </div>\r\n            <div className=\"id\"># {res?.data?.dev?.id}</div>\r\n            <Onchange>\r\n              <Button\r\n                type=\"primary\"\r\n                className=\"button_onchange\"\r\n                onClick={() => showModal(true)}\r\n              >\r\n                {t(\"account.change_avatar\")}\r\n              </Button>\r\n              {/* <img src={Pen} alt=\"pen \" /> */}\r\n            </Onchange>\r\n          </TextInfoUser>\r\n        </HeaderInfo>\r\n      ) : (\r\n        <Loading />\r\n      )}\r\n\r\n      <Modal\r\n        title=\"Edit avatar account\"\r\n        centered\r\n        open={isModalOpen}\r\n        onOk={handleChangeAvt}\r\n        onCancel={handleCancel}\r\n      >\r\n        <Upload\r\n          action=\"https://www.mocky.io/v2/5cc8019d300000980a055e76\"\r\n          listType=\"picture\"\r\n          // defaultFileList={[...fileList]}\r\n          maxCount={1}\r\n          beforeUpload={beforeUpload}\r\n          accept=\"image/png, image/jpeg\"\r\n          onChange={handleChange}\r\n        >\r\n          <Button className=\"upload_avatar_btn\" icon={<UploadOutlined />}>\r\n            Upload\r\n          </Button>\r\n        </Upload>\r\n      </Modal>\r\n    </MainAvatar>\r\n  );\r\n};\r\n\r\nexport default InfoUser;\r\n","const fields = [\r\n  'phone_number',\r\n  'country',\r\n  'business_name',\r\n  'contact_name',\r\n  'website',\r\n  'address',\r\n  'release_details',\r\n  'product_and_services',\r\n  'products_url',\r\n  'year_established',\r\n  'application_catalog',\r\n];\r\nexport default fields;\r\n","import * as yup from 'yup';\r\nexport const editInfoUserSchema = yup\r\n  .object({\r\n    first_name: yup\r\n      .string()\r\n      .required('First name is required')\r\n      .min(2, 'min length of first name is 2')\r\n      .max(10, 'min length of first name is 10'),\r\n    last_name: yup\r\n      .string()\r\n      .required('Last name is required')\r\n      .min(2, 'min length of first name is 2')\r\n      .max(10, 'min length of first name is 10'),\r\n    email: yup.string().required('Email is required').email('Invalid email address'),\r\n    phone_number: yup\r\n      .string()\r\n      .required('Phone number is required')\r\n      .min(5, 'phone number must be greater than 4 numbers')\r\n      .max(13, 'phone number must be less or equal 13 numbers')\r\n      .matches(/\\(?([0-9]{3})\\)?([ .-]?)([0-9]{3})\\2([0-9]{4})/, 'invalid phone number'),\r\n\r\n    business_name: yup.string().required('Business name is required'),\r\n    // application_catalog: yup.string().required(),\r\n    contact_name: yup\r\n      .string()\r\n      .required('Contact name is required')\r\n      .max(255, 'Contact name must be less than 255 characters'),\r\n    product_and_services: yup\r\n      .string()\r\n      .required('Product and services is required')\r\n      .max(255, 'Contact name must be less than 255 characters'),\r\n    address: yup.string().required('Address is required'),\r\n    // products_url: yup\r\n    //   .string()\r\n    //   .required()\r\n    //   .matches(\r\n    //     /((https?):\\/\\/)?(www.)?[a-z0-9]+(\\.[a-z]{2,}){1,3}(#?\\/?[a-zA-Z0-9#]+)*\\/?(\\?[a-zA-Z0-9-_]+=[a-zA-Z0-9-%]+&?)?$/,\r\n    //     \"Enter correct url!\"\r\n    //   ),\r\n    // release_details: yup\r\n    //   .string()\r\n    //   .required()\r\n    //   .max(255, \"Contact name must be less than 255 characters\"),\r\n    website: yup\r\n      .string()\r\n      .required('Website is required')\r\n      .matches(\r\n        /((https?):\\/\\/)?(www.)?[a-z0-9]+(\\.[a-z]{2,}){1,3}(#?\\/?[a-zA-Z0-9#]+)*\\/?(\\?[a-zA-Z0-9-_]+=[a-zA-Z0-9-%]+&?)?$/,\r\n        'Enter correct url!'\r\n      ),\r\n    // year_established: yup\r\n    //   .number(\"Year established can not be characters\")\r\n    //   .required()\r\n    //   .min(\r\n    //     new Date().getFullYear(),\r\n    //     \"Year must be current year or greater than current year\"\r\n    //   ),\r\n    password: yup.string(),\r\n    password_confirmation: yup\r\n      .string()\r\n      .oneOf([yup.ref('password'), null], 'Password confirm does not match'),\r\n  })\r\n  .required();\r\n","import { Button, Form, Input } from 'antd';\r\nimport React, { Fragment, useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { Controller, useForm } from 'react-hook-form';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useDispatch } from 'react-redux';\r\nimport { toast } from 'react-toastify';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport Pen from '../../../assets/Account/buttonchange.png';\r\nimport { ConvertToFormData } from '../../../helpers/formData';\r\nimport Loading from '../../../layout/components/Loading/Loading';\r\nimport { editAccountInfo } from '../../../redux/slice/account.slice';\r\nimport { goToTop } from '../../../utils';\r\nimport fields from './fields';\r\nimport { InfoDetail, ShowInfo } from './styled';\r\nimport { editInfoUserSchema } from './schema';\r\n\r\nconst InfoDetailUser = ({ res }) => {\r\n  const dispatch = useDispatch();\r\n  const { t } = useTranslation();\r\n  const [editFields, setEditFields] = useState([]);\r\n  const { first_name, last_name, phone_number, country } = res?.data.dev;\r\n  const {\r\n    business_name,\r\n    application_catalog,\r\n    contact_name,\r\n    product_and_services,\r\n    products_url,\r\n    release_details,\r\n    website,\r\n    address,\r\n    year_established,\r\n  } = res?.data.business_info ? res?.data.business_info : [];\r\n  const {\r\n    handleSubmit,\r\n    control,\r\n    getValues,\r\n    setError,\r\n    setFocus,\r\n    formState: { errors },\r\n  } = useForm({\r\n    defaultValues: {\r\n      first_name,\r\n      last_name,\r\n      phone_number,\r\n      country,\r\n      current_password: '',\r\n      password: '',\r\n      password_confirmation: '',\r\n      business_name,\r\n      contact_name,\r\n      website,\r\n      address,\r\n      release_details,\r\n      product_and_services,\r\n      products_url,\r\n      year_established,\r\n      application_catalog,\r\n    },\r\n    resolver: yupResolver(editInfoUserSchema),\r\n  });\r\n\r\n  const handleEdit = (type) => {\r\n    const setOfEditFields = [...new Set(editFields)];\r\n    const index = setOfEditFields.findIndex((el) => el === type);\r\n    if (index === -1) {\r\n      setEditFields((editFields) => [...editFields, type]);\r\n    } else {\r\n      const cloneEditFields = [...setOfEditFields];\r\n      cloneEditFields.splice(index, 1);\r\n      setEditFields(cloneEditFields);\r\n    }\r\n  };\r\n\r\n  const onSubmit = (data) => {\r\n    if (data.current_password && data.password.length < 8) {\r\n      setError('password', {\r\n        type: 'password length',\r\n        message: 'New password must be at least 8 characters',\r\n      });\r\n      setFocus('password', { shouldSelect: true });\r\n      return;\r\n    }\r\n    if (data.current_password.length === 0 && data.password.length > 0) {\r\n      setError('current_password', {\r\n        type: 'required',\r\n        message: 'You must provide your current password if you want to change it',\r\n      });\r\n      setFocus('current_password', { shouldSelect: true });\r\n      return;\r\n    }\r\n    goToTop();\r\n    const formData = ConvertToFormData(data);\r\n    dispatch(editAccountInfo(formData));\r\n  };\r\n  useEffect(() => {\r\n    const keys = Object.keys(errors);\r\n    const cloneEditFields = [...editFields, ...keys];\r\n    const setOfEditFields = [...new Set(cloneEditFields)];\r\n\r\n    setEditFields(setOfEditFields);\r\n  }, [errors]);\r\n  return (\r\n    <InfoDetail>\r\n      <div className=\"title\">{t('account.my_account')}</div>\r\n      {/* <Button className=\"button_logOut\">{t(\"account.log_out\")}</Button> */}\r\n      {res?.data ? (\r\n        <ShowInfo>\r\n          <Form onFinish={handleSubmit(onSubmit)} className=\"grid_container\">\r\n            <div className=\"grid_item one\">{t('account.user_name')}</div>\r\n            <div className=\"grid_item two\">\r\n              {editFields.includes('first_name') || editFields.includes('last_name') ? (\r\n                <div className=\"userNameField\">\r\n                  <Controller\r\n                    name=\"first_name\"\r\n                    control={control}\r\n                    rules={{ required: true }}\r\n                    render={({ field }) => (\r\n                      <div className=\"userNameInput\">\r\n                        <Form.Item>\r\n                          <Input {...field} onBlur={field.onBlur} />\r\n                        </Form.Item>\r\n                        <p className=\"validateMessage\"> {errors.first_name?.message}</p>\r\n                      </div>\r\n                    )}\r\n                  />\r\n                  <Controller\r\n                    name=\"last_name\"\r\n                    control={control}\r\n                    rules={{ required: true }}\r\n                    render={({ field }) => (\r\n                      <div className=\"userNameInput\">\r\n                        <Form.Item>\r\n                          <Input {...field} onBlur={field.onBlur} />\r\n                        </Form.Item>\r\n                        <p className=\"validateMessage\"> {errors.last_name?.message}</p>\r\n                      </div>\r\n                    )}\r\n                  />\r\n                </div>\r\n              ) : (\r\n                `${getValues('first_name')} ${getValues('last_name')}`\r\n              )}\r\n            </div>\r\n            <div className=\"grid_item\">\r\n              <Button type=\"primary\" onClick={() => handleEdit('first_name')}>\r\n                {t('account.edit')} <img src={Pen} alt=\"pen \" />\r\n              </Button>\r\n            </div>\r\n            {/* -------------------------------------- */}\r\n\r\n            <div className=\"grid_item one\">{t('account.password')}</div>\r\n            <div className=\"grid_item two\">\r\n              {editFields.includes('password') ? (\r\n                <div className=\"change_password_field\">\r\n                  <Controller\r\n                    name=\"current_password\"\r\n                    control={control}\r\n                    rules={{ required: true }}\r\n                    render={({ field }) => (\r\n                      <div>\r\n                        <Form.Item>\r\n                          <Input\r\n                            placeholder=\"current password\"\r\n                            {...field}\r\n                            onBlur={field.onBlur}\r\n                            type=\"password\"\r\n                          />\r\n                        </Form.Item>\r\n                        <p className=\"validateMessage\"> {errors.current_password?.message}</p>\r\n                      </div>\r\n                    )}\r\n                  />\r\n                  <Controller\r\n                    name=\"password\"\r\n                    control={control}\r\n                    rules={{ required: true }}\r\n                    render={({ field }) => (\r\n                      <div>\r\n                        <Form.Item>\r\n                          <Input\r\n                            placeholder=\"new password\"\r\n                            {...field}\r\n                            onBlur={field.onBlur}\r\n                            type=\"password\"\r\n                          />\r\n                        </Form.Item>\r\n                        <p className=\"validateMessage\"> {errors.password?.message}</p>\r\n                      </div>\r\n                    )}\r\n                  />\r\n                  <Controller\r\n                    name=\"password_confirmation\"\r\n                    control={control}\r\n                    rules={{ required: true }}\r\n                    render={({ field }) => (\r\n                      <div>\r\n                        {' '}\r\n                        <Form.Item>\r\n                          <Input\r\n                            placeholder=\"confirm new password\"\r\n                            {...field}\r\n                            onBlur={field.onBlur}\r\n                            type=\"password\"\r\n                          />\r\n                        </Form.Item>\r\n                        <p className=\"validateMessage\"> {errors.password_confirmation?.message}</p>\r\n                      </div>\r\n                    )}\r\n                  />\r\n                </div>\r\n              ) : (\r\n                '***********'\r\n              )}\r\n            </div>\r\n            <div className=\"grid_item\">\r\n              <Button type=\"primary\" onClick={() => handleEdit('password')}>\r\n                {t('account.edit')} <img src={Pen} alt=\"pen \" />\r\n              </Button>\r\n            </div>\r\n            {/* -------------------------------------- */}\r\n\r\n            {fields.map((fieldName, index) => {\r\n              return (\r\n                <Fragment key={index}>\r\n                  <div className=\"grid_item one\">{t(`account.${fieldName}`)}</div>\r\n                  <div className=\"grid_item two\">\r\n                    {editFields.includes(fieldName) ? (\r\n                      <Controller\r\n                        name={fieldName}\r\n                        control={control}\r\n                        rules={{ required: true }}\r\n                        render={({ field }) => (\r\n                          <div>\r\n                            <Form.Item>\r\n                              {fieldName === 'year_established' || fieldName === 'phone_number' ? (\r\n                                <Input type=\"number\" {...field} onBlur={field.onBlur} />\r\n                              ) : (\r\n                                <Input {...field} onBlur={field.onBlur} />\r\n                              )}\r\n                            </Form.Item>\r\n                            <p className=\"validateMessage\">{errors[fieldName]?.message}</p>\r\n                          </div>\r\n                        )}\r\n                      />\r\n                    ) : (\r\n                      `${\r\n                        getValues(fieldName) === 'null' || !getValues(fieldName)\r\n                          ? 'This field is empty'\r\n                          : getValues(fieldName)\r\n                      }`\r\n                    )}\r\n                  </div>\r\n                  <div className=\"grid_item\">\r\n                    <Button type=\"primary\" onClick={() => handleEdit(fieldName)}>\r\n                      {t('account.edit')} <img src={Pen} alt=\"pen \" />\r\n                    </Button>\r\n                  </div>\r\n                </Fragment>\r\n              );\r\n            })}\r\n\r\n            <Button\r\n              style={{ width: '20%', textAlign: 'center' }}\r\n              type=\"primary\"\r\n              htmlType=\"submit\"\r\n              className=\"button\"\r\n            >\r\n              Submit\r\n            </Button>\r\n          </Form>\r\n        </ShowInfo>\r\n      ) : (\r\n        <Loading />\r\n      )}\r\n    </InfoDetail>\r\n  );\r\n};\r\n\r\nexport default InfoDetailUser;\r\n","import styled from \"styled-components\";\r\n\r\nexport const MyWalletMain = styled.div`\r\n  width: 100%;\r\n  margin-top: 127px;\r\n  .title_wallet {\r\n    font-style: normal;\r\n    font-weight: 700;\r\n    font-size: 32px;\r\n    letter-spacing: 0.0025em;\r\n    color: #ffffff;\r\n  }\r\n  .your_wallet_text {\r\n    margin-top: 30px;\r\n    font-style: normal;\r\n    font-weight: 700;\r\n    font-size: 20px;\r\n    letter-spacing: 0.0025em;\r\n    color: #ffffff;\r\n  }\r\n\r\n  .button_connect {\r\n    margin-top: 23px;\r\n    display: flex;\r\n    gap: 20px;\r\n    Button {\r\n      padding: 0;\r\n      height: 90px;\r\n      width: 330px;\r\n      display: flex;\r\n      align-items: center;\r\n      ._img {\r\n        min-width: 90px;\r\n        min-height: 90px;\r\n        display: flex;\r\n        justify-content: center;\r\n        border-right: 1px solid #141414;\r\n        align-items: center;\r\n        img {\r\n          width: 60px;\r\n          height: 60px;\r\n        }\r\n      }\r\n      ._money {\r\n        padding: 0 20px;\r\n        width: 100%;\r\n        display: flex;\r\n        justify-content: space-between;\r\n        p {\r\n          font-style: normal;\r\n          font-weight: 700;\r\n          font-size: 20px;\r\n          letter-spacing: 0.0025em;\r\n          color: #ffffff;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  .connect_more {\r\n    margin-top: 17px;\r\n    width: 190px;\r\n    height: 40px;\r\n    font-style: normal;\r\n    font-weight: 400;\r\n    font-size: 16px;\r\n    letter-spacing: 0.0025em;\r\n    color: #ffffff;\r\n    background-color: #141414;\r\n  }\r\n`;\r\n","import { Button } from 'antd';\r\nimport React, { useEffect } from 'react';\r\nimport { MyWalletMain } from './styled';\r\nimport Wallet1 from '../../../assets/Account/wallet1.png';\r\nimport Metamask from '../../../assets/Account/metamask.png';\r\n\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nconst MyWallet = ({ res }) => {\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <MyWalletMain>\r\n      <div className=\"title_wallet\">{t('account.my_wallet')}</div>\r\n      <div className=\"your_wallet_text\">{t('account.your_wallet_address')}</div>\r\n      <div className=\"button_connect\">\r\n        {/* <Button type=\"primary\">\r\n          <div className=\"_img\">\r\n            <img src={Wallet1} alt=\"wallet1\" />\r\n          </div>\r\n          <div className=\"_money\">\r\n            <p>Adam kun</p>\r\n            <p>$1000</p>\r\n          </div>\r\n        </Button> */}\r\n        {res.data.dev_info?.map((item, index) => {\r\n          return (\r\n            <Button style={{ width: 'auto' }} key={index} type=\"primary\">\r\n              <div className=\"_img\">\r\n                <img src={Metamask} alt=\"wallet1\" />\r\n              </div>\r\n              <div className=\"_money\">\r\n                <p>{item.creator_address.slice(0, 7)}...</p>\r\n                <p style={{ margin: '0 30px' }}>\r\n                  Total USD: {item.total_usd ? `$${item.total_usd}` : '$0'}\r\n                </p>\r\n                <p style={{ margin: '0 30px' }}>\r\n                  Total Pools: {item.total_pools ? `$${item.total_pools}` : '$0'}\r\n                </p>\r\n                <p>Total Pending: {item.pending_usd ? `$${item.pending_usd}` : '$0'}</p>\r\n              </div>\r\n            </Button>\r\n          );\r\n        })}\r\n      </div>\r\n      {/* <Button className=\"connect_more\">\r\n        {t(\"account.connect_more_wallet\")}\r\n      </Button> */}\r\n    </MyWalletMain>\r\n  );\r\n};\r\n\r\nexport default MyWallet;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Main = styled.div`\r\n  width: 100%;\r\n  padding: 100px 80px;\r\n  background-color: #141414;\r\n`;\r\n","import { motion } from 'framer-motion';\r\nimport React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useLocation } from 'react-router-dom';\r\nimport Deposit from '../../components/Account/Deposit/Deposit';\r\nimport InfoAvatarUser from '../../components/Account/InfoUser/InfoAvatarUser';\r\nimport InfoDetailUser from '../../components/Account/InfoUser/InfoDetailUser';\r\nimport MyWallet from '../../components/Account/MyWallet/MyWallet';\r\nimport { variants } from '../../helpers/motion';\r\nimport Loading from '../../layout/components/Loading/Loading';\r\nimport { getAccount } from '../../redux/slice/account.slice';\r\nimport { Main } from './styled';\r\n\r\nconst Account = () => {\r\n  const { infoAccount, isLoading, statusGetAccount } = useSelector((state) => state.account);\r\n  const dispatch = useDispatch();\r\n\r\n  const params = useLocation();\r\n\r\n  useEffect(() => {\r\n    if (params.hash !== '') {\r\n      const element = document.querySelector(params.hash);\r\n      if (element) {\r\n        element.scrollIntoView({ behavior: 'smooth' });\r\n      }\r\n    }\r\n  }, [params, isLoading]);\r\n  console.log(params);\r\n  return (\r\n    <>\r\n      <motion.main variants={variants} initial=\"hidden\" animate=\"visible\" exit=\"hidden\">\r\n        <Main>\r\n          {isLoading || statusGetAccount !== 'success' ? (\r\n            <Loading />\r\n          ) : (\r\n            <>\r\n              <InfoAvatarUser res={infoAccount?.res} />\r\n              <Deposit />\r\n\r\n              <InfoDetailUser res={infoAccount?.res} />\r\n              <MyWallet res={infoAccount?.res} />\r\n              {/* <ListAppCreated ref={createdAppRef} /> */}\r\n              {/* <MyActivities res={infoAccount?.res} /> */}\r\n              {/* <DownloadApp res={infoAccount?.res} /> */}\r\n              {/* <TodayActivities res={infoAccount?.res} /> */}\r\n            </>\r\n          )}\r\n        </Main>\r\n      </motion.main>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Account;\r\n"],"names":["variants","hidden","x","opacity","transition","duration","visible","notify","toastId","message","toast","current","DepositWrapper","styled","dispatch","useDispatch","formRef","React","isModalOpen","setIsModalOpen","isLoadingAddMoney","setIsLoadingAddMoney","type","onClick","title","open","onOk","onCancel","footer","onFinish","value","addMoney","deposit","unwrap","then","res","status","resetFields","ref","src","style","textAlign","fontWeight","fontSize","name","rules","required","placeholder","loading","htmlType","width","MainAvatar","HeaderInfo","AvatarUser","TextInfoUser","Onchange","InfoDetail","ShowInfo","useState","disabledButton","setDisabledButton","file","setFile","formData","FormData","t","useTranslation","data","dev","avatar","URL_API","alt","verticalAlign","getDefaultAvatarName","first_name","last_name","className","id","Loading","centered","Object","keys","length","append","getEditAvatar","action","listType","maxCount","beforeUpload","isJpgOrPng","console","log","accept","onChange","info","originFileObj","icon","UploadOutlined","editInfoUserSchema","yup","min","max","email","phone_number","matches","business_name","contact_name","product_and_services","address","website","password","password_confirmation","oneOf","editFields","setEditFields","country","business_info","application_catalog","products_url","release_details","year_established","useForm","defaultValues","current_password","resolver","yupResolver","handleSubmit","control","getValues","setError","setFocus","errors","formState","handleEdit","setOfEditFields","Set","index","findIndex","el","cloneEditFields","splice","useEffect","shouldSelect","goToTop","ConvertToFormData","editAccountInfo","includes","render","field","onBlur","Pen","fields","fieldName","Fragment","MyWalletMain","dev_info","map","item","Metamask","creator_address","slice","margin","total_usd","total_pools","pending_usd","Main","useSelector","state","account","infoAccount","isLoading","statusGetAccount","params","useLocation","hash","element","document","querySelector","scrollIntoView","behavior","motion","initial","animate","exit","InfoAvatarUser"],"sourceRoot":""}